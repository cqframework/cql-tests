<?xml version="1.0" encoding="utf-8"?>
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://hl7.org/fhirpath/tests"
       xsi:schemaLocation="http://hl7.org/fhirpath/tests ../../testSchema/testSchema.xsd"
       name="CqlIntervalOperatorsTest"
       reference="https://cql.hl7.org/09-b-cqlreference.html#interval-operators-3"
       version="1.0">
  <!-- Suite-level capability (applies to all groups/tests unless overridden) -->
  <capability code="interval-operators"/>
  <group name="After" version="1.0">
    <!-- Group-level capability -->
    <capability code="interval-operators"/>
    <test name="TestAfterNull" version="1.0">
      <capability code="interval-operators"/>
      <expression>(null as Integer) after Interval[1, 10]</expression>
      <output>null</output>
    </test>
    <test name="IntegerIntervalAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11, 20] after Interval[1, 10]</expression>
      <output>true</output>
    </test>
    <test name="IntegerIntervalAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[1, 10] after Interval[11, 20]</expression>
      <output>false</output>
    </test>
    <test name="IntegerIntervalPointAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>12 after Interval[1, 10]</expression>
      <output>true</output>
    </test>
    <test name="IntegerIntervalPointAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>9 after Interval[1, 10]</expression>
      <output>false</output>
    </test>
    <test name="IntegerIntervalAfterPointTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11, 20] after 5</expression>
      <output>true</output>
    </test>
    <test name="IntegerIntervalAfterPointFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11, 20] after 12</expression>
      <output>false</output>
    </test>
    <test name="DecimalIntervalAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0, 20.0] after Interval[1.0, 10.0]</expression>
      <output>true</output>
    </test>
    <test name="DecimalIntervalAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[1.0, 10.0] after Interval[11.0, 20.0]</expression>
      <output>false</output>
    </test>
    <test name="DecimalIntervalPointAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>12.0 after Interval[1.0, 10.0]</expression>
      <output>true</output>
    </test>
    <test name="DecimalIntervalPointAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>9.0 after Interval[1.0, 10.0]</expression>
      <output>false</output>
    </test>
    <test name="DecimalIntervalAfterPointTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0, 20.0] after 5.0</expression>
      <output>true</output>
    </test>
    <test name="DecimalIntervalAfterPointFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0, 20.0] after 12.0</expression>
      <output>false</output>
    </test>
    <test name="QuantityIntervalAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0 'g', 20.0 'g'] after Interval[1.0 'g', 10.0 'g']</expression>
      <output>true</output>
    </test>
    <test name="QuantityIntervalAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[1.0 'g', 10.0 'g'] after Interval[11.0 'g', 20.0 'g']</expression>
      <output>false</output>
    </test>
    <test name="QuantityIntervalPointAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>12.0'g' after Interval[1.0 'g', 10.0 'g']</expression>
      <output>true</output>
    </test>
    <test name="QuantityIntervalPointAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>9.0'g' after Interval[1.0 'g', 10.0 'g']</expression>
      <output>false</output>
    </test>
    <test name="QuantityIntervalAfterPointTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0 'g', 20.0 'g'] after 5.0'g'</expression>
      <output>true</output>
    </test>
    <test name="QuantityIntervalAfterPointFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[11.0 'g', 20.0 'g'] after 12.0'g'</expression>
      <output>false</output>
    </test>
    <test name="DateTimeAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] after DateTime(2011, 12, 31)</expression>
      <output>true</output>
    </test>
    <test name="DateTimeAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] after DateTime(2012, 12, 31)</expression>
      <output>false</output>
    </test>
    <test name="TimeAfterTrue" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[@T15:59:59.999, @T20:59:59.999] after @T12:59:59.999</expression>
      <output>true</output>
    </test>
    <test name="TimeAfterFalse" version="1.0">
      <capability code="interval-operators"/>
      <expression>Interval[@T15:59:59.999, @T20:59:59.999] after @T17:59:59.999</expression>
      <output>false</output>
    </test>
  </group>

  <!-- For brevity, the remaining groups follow the same pattern: group-level -->
  <!-- <capability code="interval-operators"/> and test-level capability tags. -->

</tests>
