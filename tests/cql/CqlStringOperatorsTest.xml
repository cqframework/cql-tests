<?xml version='1.0' encoding='utf-8'?>
<tests xmlns="http://hl7.org/fhirpath/tests" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhirpath/tests ../../testSchema/testSchema.xsd" name="CqlStringOperatorsTest" reference="https://cql.hl7.org/09-b-cqlreference.html#string-operators-3" version="1.0">
	<capability code="string-operators" />
	<group name="Combine" version="1.0">
		<capability code="string-operators" />
		<test name="CombineNull" version="1.0">
			<capability code="string-operators" />
			<expression>Combine(null)</expression>
			<output>null</output>
		</test>
		<test name="CombineEmptyList" version="1.0">
			<capability code="string-operators" />
			<expression>Combine({})</expression>
			<output>null</output>
		</test>
		<test name="CombineABC" version="1.0">
			<capability code="string-operators" />
			<expression>Combine({'a', 'b', 'c'})</expression>
			<output>'abc'</output>
		</test>
		<test name="CombineABCSepDash" version="1.0">
			<capability code="string-operators" />
			<expression>Combine({'a', 'b', 'c'}, '-')</expression>
			<output>'a-b-c'</output>
		</test>
	</group>
	<group name="Concatenate" version="1.0">
		<capability code="string-operators" />
			<test name="ConcatenateNullNull" version="1.0">
			<capability code="string-operators" />
			<expression>Concatenate(null, null)</expression>
			<output>null</output>
		</test>
		<test name="ConcatenateANull" version="1.0">
			<capability code="string-operators" />
			<expression>Concatenate('a', null)</expression>
			<output>null</output>
		</test>
		<test name="ConcatenateNullB" version="1.0">
			<capability code="string-operators" />
			<expression>Concatenate(null, 'b')</expression>
			<output>null</output>
		</test>
		<test name="ConcatenateAB" version="1.0">
			<capability code="string-operators" />
			<expression>Concatenate('a', 'b')</expression>
			<output>'ab'</output>
		</test>
		<test name="ConcatenateABWithAdd" version="1.0">
			<capability code="string-operators" />
			<expression>'a' + 'b'</expression>
			<output>'ab'</output>
		</test>
	</group>
	<group name="EndsWith" version="1.0">
		<capability code="string-operators" />
			<test name="EndsWithNull" version="1.0">
			<capability code="string-operators" />
			<expression>EndsWith(null, null)</expression>
			<output>null</output>
		</test>
		<test name="EndsWithTrue" version="1.0">
			<capability code="string-operators" />
			<expression>EndsWith('Chris Schuler is the man!!', 'n!!')</expression>
			<output>true</output>
		</test>
		<test name="EndsWithFalse" version="1.0">
			<capability code="string-operators" />
			<expression>EndsWith('Chris Schuler is the man!!', 'n!')</expression>
			<output>false</output>
		</test>
	</group>
	<group name="Indexer" version="1.0">
		<capability code="string-operators" />
			<test name="IndexerNullNull" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer(null as String, null)</expression>
			<output>null</output>

		</test>
		<test name="IndexerANull" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer('a', null)</expression>
			<output>null</output>
		</test>
		<test name="IndexerNull1String" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer(null as String, 1)</expression>
			<output>null</output>

		</test>
		<test name="IndexerAB0" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer('ab', 0)</expression>
			<output>'a'</output>
		</test>
		<test name="IndexerAB1" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer('ab', 1)</expression>
			<output>'b'</output>
		</test>
		<test name="IndexerAB2" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer('ab', 2)</expression>
			<output>null</output>
		</test>
		<test name="IndexerABNeg1" version="1.0">
			<capability code="string-operators" />
			<expression>Indexer('ab', -1)</expression>
			<output>null</output>
		</test>
	</group>
	<group name="LastPositionOf" version="1.0">
		<capability code="string-operators" />
			<test name="LastPositionOfNull" version="1.0">
			<capability code="string-operators" />
			<expression>LastPositionOf(null, null)</expression>
			<output>null</output>
		</test>
		<test name="LastPositionOfNull1" version="1.0">
			<capability code="string-operators" />
			<expression>LastPositionOf(null, 'hi')</expression>
			<output>null</output>
		</test>
		<test name="LastPositionOfNull2" version="1.0">
			<capability code="string-operators" />
			<expression>LastPositionOf('hi', null)</expression>
			<output>null</output>
		</test>
		<test name="LastPositionOf1" version="1.0">
			<capability code="string-operators" />
			<expression>LastPositionOf('hi', 'Ohio is the place to be!')</expression>
			<output>1</output>
		</test>
		<test name="LastPositionOf2" version="1.0">
			<capability code="string-operators" />
			<expression>LastPositionOf('hi', 'Say hi to Ohio!')</expression>
			<output>11</output>
		</test>
	</group>
	<group name="Length" version="1.0">
		<capability code="string-operators" />
			<test name="LengthNullString" version="1.0">
			<capability code="string-operators" />
			<expression>Length(null as String)</expression>
			<output>null</output>

		</test>
		<test name="LengthEmptyString" version="1.0">
			<capability code="string-operators" />
			<expression>Length('')</expression>
			<output>0</output>
		</test>
		<test name="LengthA" version="1.0">
			<capability code="string-operators" />
			<expression>Length('a')</expression>
			<output>1</output>
		</test>
		<test name="LengthAB" version="1.0">
			<capability code="string-operators" />
			<expression>Length('ab')</expression>
			<output>2</output>
		</test>
	</group>
	<group name="Lower" version="1.0">
		<capability code="string-operators" />
			<test name="LowerNull" version="1.0">
			<capability code="string-operators" />
			<expression>Lower(null)</expression>
			<output>null</output>
		</test>
		<test name="LowerEmpty" version="1.0">
			<capability code="string-operators" />
			<expression>Lower('')</expression>
			<output>''</output>
		</test>
		<test name="LowerA" version="1.0">
			<capability code="string-operators" />
			<expression>Lower('A')</expression>
			<output>'a'</output>
		</test>
		<test name="LowerB" version="1.0">
			<capability code="string-operators" />
			<expression>Lower('b')</expression>
			<output>'b'</output>
		</test>
		<test name="LowerAB" version="1.0">
			<capability code="string-operators" />
			<expression>Lower('Ab')</expression>
			<output>'ab'</output>
		</test>
	</group>
	<group name="Matches" version="1.0">
		<capability code="string-operators" />
			<test name="MatchesNull" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost', null)</expression>
			<output>null</output>
		</test>
		<test name="MatchesNumberFalse" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost', '.*\\d+')</expression>
			<output>false</output>
		</test>
		<test name="MatchesNumberTrue" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost - circa 2017', '.*\\d+')</expression>
			<output>true</output>
		</test>
		<test name="MatchesAllTrue" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost', '.*')</expression>
			<output>true</output>
		</test>
		<test name="MatchesWordsAndSpacesTrue" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost', '[\\w|\\s]+')</expression>
			<output>true</output>
		</test>
		<test name="MatchesWordsAndSpacesFalse" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('Not all who wander are lost - circa 2017', '^[\\w\\s]+$')</expression>
			<output>false</output>
		</test>
		<test name="MatchesNotWords" version="1.0">
			<capability code="string-operators" />
			<expression>Matches('   ', '\\W+')</expression>
			<output>true</output>
		</test>
		<test name="MatchesWhiteSpace" version="1.0">
			<capability code="string-operators" />
			<expression>Matches(' \n\t', '\\s+')</expression>
			<output>true</output>
		</test>
	</group>
	<group name="PositionOf" version="1.0">
		<capability code="string-operators" />
			<test name="PositionOfNullNull" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf(null, null)</expression>
			<output>null</output>
		</test>
		<test name="PositionOfANull" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf('a', null)</expression>
			<output>null</output>
		</test>
		<test name="PositionOfNullA" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf(null, 'a')</expression>
			<output>null</output>
		</test>
		<test name="PositionOfAInAB" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf('a', 'ab')</expression>
			<output>0</output>
		</test>
		<test name="PositionOfBInAB" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf('b', 'ab')</expression>
			<output>1</output>
		</test>
		<test name="PositionOfCInAB" version="1.0">
			<capability code="string-operators" />
			<expression>PositionOf('c', 'ab')</expression>
			<output>-1</output>
		</test>
	</group>
	<group name="ReplaceMatches" version="1.0">
		<capability code="string-operators" />
			<test name="ReplaceMatchesNull" version="1.0">
			<capability code="string-operators" />
			<expression>ReplaceMatches('Not all who wander are lost', null, 'But I am...')</expression>
			<output>null</output>
		</test>
		<test name="ReplaceMatchesAll" version="1.0">
			<capability code="string-operators" />
			<expression>ReplaceMatches('Not all who wander are lost', 'Not all who wander are lost', 'But still waters run deep')</expression>
			<output>'But still waters run deep'</output>
		</test>
		<test name="ReplaceMatchesMany" version="1.0">
			<capability code="string-operators" />
			<expression>ReplaceMatches('Who put the bop in the bop she bop she bop?', 'bop', 'bang')</expression>
			<output>'Who put the bang in the bang she bang she bang?'</output>
		</test>
		<test name="ReplaceMatchesSpaces" version="1.0">
			<capability code="string-operators" />
			<expression>ReplaceMatches('All that glitters is not gold', '\\s', '\\$')</expression>
			<output>'All$that$glitters$is$not$gold'</output>
		</test>
	</group>
	<group name="Split" version="1.0">
		<capability code="string-operators" />
			<test name="SplitNullNull" version="1.0">
			<capability code="string-operators" />
			<expression>Split(null, null)</expression>
			<output>null</output>
		</test>
		<test name="SplitNullComma" version="1.0">
			<capability code="string-operators" />
			<expression>Split(null, ',')</expression>
			<output>null</output>
		</test>
		<test name="SplitABNull" version="1.0">
			<capability code="string-operators" />
			<expression>Split('a,b', null)</expression>
			<output>{'a,b'}</output>
		</test>
		<test name="SplitABDash" version="1.0">
			<capability code="string-operators" />
			<expression>Split('a,b', '-')</expression>
			<output>{'a,b'}</output>
		</test>
		<test name="SplitABComma" version="1.0">
			<capability code="string-operators" />
			<expression>Split('a,b', ',')</expression>
			<output>{'a','b'}</output>
		</test>
	</group>
	<group name="StartsWith" version="1.0">
		<capability code="string-operators" />
			<test name="StartsWithNull" version="1.0">
			<capability code="string-operators" />
			<expression>StartsWith(null, null)</expression>
			<output>null</output>
		</test>
		<test name="StartsWithNull1" version="1.0">
			<capability code="string-operators" />
			<expression>StartsWith('hi', null)</expression>
			<output>null</output>
		</test>
		<test name="StartsWithNull2" version="1.0">
			<capability code="string-operators" />
			<expression>StartsWith(null, 'hi')</expression>
			<output>null</output>
		</test>
		<test name="StartsWithTrue1" version="1.0">
			<capability code="string-operators" />
			<expression>StartsWith('Breathe deep the gathering gloom', 'Bre')</expression>
			<output>true</output>
		</test>
		<test name="StartsWithFalse1" version="1.0">
			<capability code="string-operators" />
			<expression>StartsWith('Breathe deep the gathering gloom', 'bre')</expression>
			<output>false</output>
		</test>
	</group>
	<group name="Substring" version="1.0">
		<capability code="string-operators" />
			<test name="SubstringNullNull" version="1.0">
			<capability code="string-operators" />
			<expression>Substring(null, null)</expression>
			<output>null</output>
		</test>
		<test name="SubstringANull" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('a', null)</expression>
			<output>null</output>
		</test>
		<test name="SubstringNull1" version="1.0">
			<capability code="string-operators" />
			<expression>Substring(null, 1)</expression>
			<output>null</output>
		</test>
		<test name="SubstringAB0" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', 0)</expression>
			<output>'ab'</output>
		</test>
		<test name="SubstringAB1" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', 1)</expression>
			<output>'b'</output>
		</test>
		<test name="SubstringAB2" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', 2)</expression>
			<output>null</output>
		</test>
		<test name="SubstringABNeg1" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', -1)</expression>
			<output>null</output>
		</test>
		<test name="SubstringAB0To1" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', 0, 1)</expression>
			<output>'a'</output>
		</test>
		<test name="SubstringABC1To1" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('abc', 1, 1)</expression>
			<output>'b'</output>
		</test>
		<test name="SubstringAB0To3" version="1.0">
			<capability code="string-operators" />
			<expression>Substring('ab', 0, 3)</expression>
			<output>'ab'</output>
		</test>
	</group>
	<group name="Upper" version="1.0">
		<capability code="string-operators" />
			<test name="UpperNull" version="1.0">
			<capability code="string-operators" />
			<expression>Upper(null)</expression>
			<output>null</output>
		</test>
		<test name="UpperEmpty" version="1.0">
			<capability code="string-operators" />
			<expression>Upper('')</expression>
			<output>''</output>
		</test>
		<test name="UpperA" version="1.0">
			<capability code="string-operators" />
			<expression>Upper('a')</expression>
			<output>'A'</output>
		</test>
		<test name="UpperB" version="1.0">
			<capability code="string-operators" />
			<expression>Upper('B')</expression>
			<output>'B'</output>
		</test>
		<test name="UpperAB" version="1.0">
			<capability code="string-operators" />
			<expression>Upper('aB')</expression>
			<output>'AB'</output>
		</test>
	</group>
	<group name="toString tests" version="1.0">
		<capability code="string-operators" />
			<test name="QuantityToString" version="1.0">
			<capability code="string-operators" />
			<expression>ToString(125 'cm')</expression>
			<output>'125 \'cm\''</output>
		</test>
		<test name="DateTimeToString1" version="1.0">
			<capability code="string-operators" />
			<expression>ToString(DateTime(2000, 1, 1))</expression>
			<output>'2000-01-01'</output>
		</test>
		<test name="DateTimeToString2" version="1.0">
			<capability code="string-operators" />
			<expression>ToString(DateTime(2000, 1, 1, 15, 25, 25, 300))</expression>
			<output>'2000-01-01T15:25:25.300'</output>
		</test>
		<test name="DateTimeToString3" version="1.0">
			<capability code="string-operators" />
			<expression>ToString(DateTime(2000, 1, 1, 8, 25, 25, 300, -7))</expression>
			<output>'2000-01-01T08:25:25.300-07:00'</output>
		</test>
		<test name="TimeToString1" version="1.0">
			<capability code="string-operators" />
			<expression>ToString(@T09:30:01.003)</expression>
			<output>'09:30:01.003'</output>
		</test>
	</group>
</tests>
