<?xml version="1.0" encoding="utf-8"?>
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://hl7.org/fhirpath/tests" xsi:schemaLocation="http://hl7.org/fhirpath/tests ../../testSchema/testSchema.xsd"
	name="CqlAggregateTest" reference="http://build.fhir.org/ig/HL7/cql/03-developersguide.html#aggregate-queries" version="1.5">
	<capability code="aggregate-clause-query"/>
	<group name="AggregateTests" version="1.5">
		<capability code="aggregate-clause-query"/>
		<test name="FactorialOfFive" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>({ 1, 2, 3, 4, 5 }) Num aggregate Result starting 1: Result * Num</expression>
			<output>120</output>
		</test>
		<test name="RolledOutIntervals" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				({
				  Interval[@2012-01-01, @2012-02-28],
				  Interval[@2012-02-01, @2012-03-31],
				  Interval[@2012-03-01, @2012-04-30]
				}) M
				  aggregate R starting (null as List&lt;Interval&lt;DateTime>>): R union ({
				    M X
				      let S: Max({ end of Last(R) + 1 day, start of X }),
				        E: S + Quantity{ value: duration in days of X, unit: 'days' }
				      return Interval[S, E]
				  })
			</expression>
			<output>
				{
				  Interval[@2012-01-01, @2012-02-28],
				  Interval[@2012-02-29, @2012-04-28],
				  Interval[@2012-04-29, @2012-06-28]
				}
			</output>
		</test>
		<test name="AggregateSumWithStart" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				({ 1, 2, 3, 4, 5 }) Num
				  aggregate Result starting 1: Result + Num
			</expression>
			<output>16</output>
			<!-- 15 + 1 (the initial value) -->
		</test>
		<test name="AggregateSumWithNull" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				({ 1, 2, 3, 4, 5 }) Num
				  aggregate Result: Coalesce(Result, 0) + Num
			</expression>
			<output>15</output>
			<!-- 15 + 0 (the initial value from null) -->
		</test>
		<test name="AggregateSumAll" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				({ 1, 1, 2, 2, 2, 3, 4, 4, 5 }) Num
				  aggregate all Result: Coalesce(Result, 0) + Num
			</expression>
			<output>24</output>
			<!-- 24 + 0 -->
		</test>
		<test name="AggregateSumDistinct" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				({ 1, 1, 2, 2, 2, 3, 4, 4, 5 }) Num
				  aggregate distinct Result: Coalesce(Result, 0) + Num
			</expression>
			<output>15</output>
			<!-- 15 + 0 (the initial value) -->
		</test>
		<test name="Multi" version="1.5">
			<capability code="single-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				from ({1}) X, ({2}) Y, ({3}) Z
				  aggregate Agg: Coalesce(Agg, 0) + X + Y + Z
			</expression>
			<output>6</output>
		</test>
		<test name="MegaMulti" version="1.5">
			<capability code="multi-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				from ({1, 2}) X, ({1, 2}) Y, ({1, 2}) Z
				  aggregate Agg starting 0: Agg + X + Y + Z
			</expression>
			<output>36</output>
			<!-- (1+1+1)+(1+1+2)+(1+2+1)+(1+2+2)+(2+1+1)+(2+1+2)+(2+2+1)+(2+2+2) -->
		</test>
		<test name="MegaMultiDistinct" version="1.5">
			<capability code="multi-source-query"/>
			<capability code="aggregate-clause-query"/>
			<expression>
				from ({1, 2, 2, 1}) X, ({1, 2, 1, 2}) Y, ({2, 1, 2, 1}) Z
				  aggregate distinct Agg starting 1: Agg + X + Y + Z
			</expression>
			<output>37</output>
			<!-- 1 + (1+1+1)+(1+1+2)+(1+2+1)+(1+2+2)+(2+1+1)+(2+1+2)+(2+2+1)+(2+2+2) -->
		</test>
	</group>
</tests>
