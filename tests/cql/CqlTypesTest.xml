<?xml version='1.0' encoding='utf-8'?>
<tests xmlns="http://hl7.org/fhirpath/tests" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhirpath/tests ../../testSchema/testSchema.xsd" name="CqlTypesTest" reference="https://cql.hl7.org/09-b-cqlreference.html#types-2" version="1.0">
	<capability code="types" />
	<group name="Any" version="1.0">
		<capability code="types" />
		<test name="AnyQuantity" version="1.0">
			<capability code="types" />
			<expression>5.0 'g'</expression>
			<output>5.0'g'</output>
		</test>
		<test name="AnyDateTime" version="1.0">
			<capability code="types" />
			<expression>DateTime(2012, 4, 4)</expression>
			<output>@2012-04-04T</output>
		</test>
		<test name="AnyTime" version="1.0">
			<capability code="types" />
			<expression>@T09:00:00.000</expression>
			<output>@T09:00:00.000</output>
		</test>
		<test name="AnyInterval" version="1.0">
			<capability code="types" />
			<expression>Interval[2, 7]</expression>
			<output>Interval[2, 7]</output>
		</test>
		<test name="AnyList" version="1.0">
			<capability code="types" />
			<expression>{1, 2, 3}</expression>
			<output>{1, 2, 3}</output>
		</test>
		<test name="AnyTuple" version="1.5">
			<capability code="types" />
			<expression>Tuple { id: 5, name: 'Chris'}</expression>
			<output>Tuple { id: 5, name: 'Chris'}</output>
		</test>
		<test name="AnyString" version="1.5">
			<capability code="types" />
			<expression>Tuple { id: 5, name: 'Chris'}.name</expression>
			<output>'Chris'</output>
		</test>
	</group>
	<group name="Boolean" version="1.0">
		<!-- REPLACED BY TestIsolatedCqlExprs : ValueLiteralsAndSelectors.xml -->
		<capability code="types" />
	</group>
	<group name="DateTime" version="1.0">
		<capability code="types" />
			<test name="DateTimeNull" version="1.0">
			<capability code="types" />
			<expression>DateTime(null)</expression>
			<output>null</output>
		</test>
		<test name="DateTimeUpperBoundExcept" version="1.0">
			<capability code="types" />
			<expression invalid="true">DateTime(10000, 12, 31, 23, 59, 59, 999)</expression>

		</test>
		<test name="DateTimeLowerBoundExcept" version="1.0">
			<capability code="types" />
			<expression invalid="true">DateTime(0000, 1, 1, 0, 0, 0, 0)</expression>

		</test>
		<test name="DateTimeProper" version="1.0">
			<capability code="types" />
			<expression>DateTime(2016, 7, 7, 6, 25, 33, 910)</expression>
			<output>@2016-07-07T06:25:33.910</output>
		</test>
		<test name="DateTimeIncomplete" version="1.0">
			<capability code="types" />
			<expression>DateTime(2015, 2, 10)</expression>
			<output>@2015-02-10T</output>
		</test>
		<test name="DateTimeUncertain" version="1.0">
			<capability code="types" />
			<expression>days between DateTime(2015, 2, 10) and DateTime(2015, 3)</expression>
			<output>Interval [ 18, 49 ]</output>

		</test>
		<test name="DateTimeMin" version="1.0">
			<capability code="types" />
			<expression>DateTime(0001, 1, 1, 0, 0, 0, 0)</expression>
			<output>@0001-01-01T00:00:00.000</output>
		</test>
		<test name="DateTimeMax" version="1.0">
			<capability code="types" />
			<expression>DateTime(9999, 12, 31, 23, 59, 59, 999)</expression>
			<output>@9999-12-31T23:59:59.999</output>
		</test>
		<test name="DateTimeTimeUnspecified" version="1.0">
			<capability code="types" />
			<expression>hour from @2015-02-10T is null</expression>
			<output>true</output>
		</test>
	</group>
	<group name="Decimal" version="1.0">
		<!-- REPLACED BY TestIsolatedCqlExprs : ValueLiteralsAndSelectors.xml -->
		<capability code="types" />
	</group>
	<group name="Integer" version="1.0">
		<!-- REPLACED BY TestIsolatedCqlExprs : ValueLiteralsAndSelectors.xml -->
		<capability code="types" />
	</group>
	<group name="Interval" version="1.0">
		<capability code="types" />
	</group>
	<group name="Quantity" version="1.0">
		<capability code="types" />
			<test name="QuantityTest" version="1.0">
			<capability code="types" />
			<expression>150.2 '[lb_av]'</expression>
			<output>150.2 '[lb_av]'</output>
		</test>
		<test name="QuantityTest2" version="1.0">
			<capability code="types" />
			<expression>2.5589 '{eskimo kisses}'</expression>
			<output>2.5589 '{eskimo kisses}'</output>
		</test>
		<test name="QuantityFractionalTooBig" version="1.0">
			<capability code="types" />
			<expression>5.999999999 'g'</expression>
			<output>5.999999999 'g'</output>
		</test>
	</group>
	<group name="String" version="1.0">
		<capability code="types" />
			<test name="StringTestEscapeQuotes" version="1.0">
			<capability code="types" />
			<expression>'\'I start with a single quote and end with a double quote\"'</expression>
			<output>'\u0027I start with a single quote and end with a double quote\u0022'</output>
		</test>
		<test name="StringUnicodeTest" version="1.0">
			<capability code="types" />
			<expression>'\u0048\u0069'</expression>
			<output>'Hi'</output>
		</test>
	</group>
	<group name="Time" version="1.0">
		<capability code="types" />
			<test name="TimeUpperBoundHours" version="1.0">
			<capability code="types" />
			<expression invalid="semantic">@T24:59:59.999</expression>
		</test>
		<test name="TimeUpperBoundMinutes" version="1.0">
			<capability code="types" />
			<expression invalid="semantic">@T23:60:59.999</expression>
		</test>
		<test name="TimeUpperBoundSeconds" version="1.0">
			<capability code="types" />
			<expression invalid="semantic">@T23:59:60.999</expression>
		</test>
		<test name="TimeUpperBoundMillis" version="1.0">
			<capability code="types" />
			<expression invalid="semantic">@T23:59:59.10000</expression>
		</test>
		<test name="TimeProper" version="1.0">
			<capability code="types" />
			<expression>@T10:25:12.863</expression>
			<output>@T10:25:12.863</output>
		</test>
		<test name="TimeAllMax" version="1.0">
			<capability code="types" />
			<expression>@T23:59:59.999</expression>
			<output>@T23:59:59.999</output>
		</test>
		<test name="TimeAllMin" version="1.0">
			<capability code="types" />
			<expression>@T00:00:00.000</expression>
			<output>@T00:00:00.000</output>
		</test>
	</group>
</tests>
